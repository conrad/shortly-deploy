{
  "name": "grunt-git",
  "description": "Git commands for grunt.",
  "version": "0.3.3",
  "homepage": "https://github.com/rubenv/grunt-git",
  "author": {
    "name": "Ruben Vermeersch",
    "email": "ruben@savanne.be",
    "url": "http://savanne.be/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rubenv/grunt-git.git"
  },
  "bugs": {
    "url": "https://github.com/rubenv/grunt-git/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rubenv/grunt-git/blob/master/LICENSE"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-bump": "0.0.13",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-jscs-checker": "~0.4.1",
    "grunt-mocha-cli": "~1.0.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "dependencies": {
    "flopmang": "^0.0.1"
  },
  "readme": "# grunt-git\n\n> Git commands for grunt.\n\n[![Build Status](https://travis-ci.org/rubenv/grunt-git.png?branch=master)](https://travis-ci.org/rubenv/grunt-git)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-git --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-git');\n```\n\n### Upgrading from v0.2.x\nThe `gitcommit` command used to call `git add` for you. This is no longer the case. Be sure to add a `gitadd` task whenever there might be new files to commit. The `ignoreEmpty` option is no longer supported.\n\n## Universal options\nThe following options may be applied to any task\n\n#### options.verbose\nType: `boolean`\nDefault value: `none`\n\nConsole output from the git task will be piped to the output of the grunt script. Useful for debugging.\n\n#### options.cwd\nType: `string`\nDefault value: `none`\n\nChange the current working directory before executing the git call. Useful for performing operations on repositories that are located in subdirectories.\n**Note:** When performing commands that provide files (e.g. gitcommit), it is also necessary to specify the ``cwd`` for the files explicitly.\n\n#### Example:\n```js\ngrunt.initConfig({\n  gitcommit: {\n    your_target: {\n      options: {\n        cwd: \"/path/to/repo\"\n      },\n      files: [\n        {\n          src: [\"fileone.txt\", \"filetwo.js\"],\n          expand: true,\n          cwd: \"/path/to/repo\"\n        }\n      ]\n    }\n  },\n})\n```\n\n## The \"gitadd\" task\n\nAdd file contents to the index\n\n### Options\n\n#### options.all\nType: `Boolean`\nDefault value: `false`\n\nUpdate the index not only where the working tree has a file matching <pathspec> but also where the\nindex already has an entry. This adds, modifies, and removes index entries to match the working tree.\n\n#### options.force\nType: `Boolean`\nDefault value: `false`\n\nAllow adding otherwise ignored files.\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n  gitadd: {\n    task: {\n      options: {\n        force: true\n      },\n      files: {\n        src: ['test.txt']\n      }\n    }\n  },\n});\n```\n\n## The \"gitcommit\" task\n\nCommits the working directory.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitcommit` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitcommit: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      },\n      files: {\n          // Specify the files you want to commit\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.message\nType: `String`\nDefault value: `'Commit'`\n\nThe commit message.\n\n#### options.allowEmpty\nType: `Boolean`\nDefault value: `false`\n\nWhen `true`, the task will not fail when there are no staged changes (optional).\n\n#### options.noVerify\nType: `Boolean`\nDefault value: `false`\n\nWhen `true`, the task will commit the changes with the `--no-verify` flag.\n\n#### options.noStatus\nType: `Boolean`\nDefault value: `false`\n\nWhen `true`, the task will commit the changes with the `--no-status` flag.\n\n### Usage Examples\n\nCommit options:\n\n* `message`: Commit message\n* `files`: Files to commit\n* `noVerify`: Bypass the pre-commit and commit-msg hooks when committing changes\n* `noStatus`: Do not include the output of `git-status` in the commit message\n\n```js\ngrunt.initConfig({\n    gitcommit: {\n        task: {\n            options: {\n                message: 'Testing',\n                noVerify: true,\n                noStatus: false\n            },\n            files: {\n                src: ['test.txt']\n            }\n        }\n    },\n});\n```\n\n\n## The \"gitrebase\" task\n\nRebases the current branch onto another branch\n\n### Options\n\n#### options.branch (required)\nType: `String`\nthe name of the branch you want to rebase **on to**.  For example if the current branch were `codfish` and you wanted to rebase it onto `master`, you would set this value to `master`.\n\n#### options.theirs\nType: `Boolean`\n  Default value: `false`\n\nWhen true, use the git equivalent of svn's `theirs-conflict` (`--strategy=recursive -Xtheirs`).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n  gitrebase: {\n    task: {\n      options: {\n        branch: 'master'\n      }\n    }\n  },\n});\n```\n\n## The \"gittag\" task\n\nCreates (or deletes) a git tag.\n\n### Overview\nIn your project's Gruntfile, add a section named `gittag` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gittag: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.tag\nType: `String`\nDefault value: `''`\n\nThe name of the tag. E.g.: `0.0.1`.\n\n#### options.message\nType: `String`\nDefault value: `''`\n\nThe tag message (optional).\n\n#### options.remove\nType: `Boolean`\nDefault value: `false`\n\nWhether to delete the tag (optional).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gittag: {\n        addtag: {\n            options: {\n                tag: '0.0.1',\n                message: 'Testing'\n            }\n        },\n        deletetag: {\n            options: {\n                tag: '0.0.1',\n                remove: true\n            }\n        }\n    },\n});\n```\n\n## The \"gitcheckout\" task\n\nCreates a git branch using checkout -b, or checks out a given branch.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitcheckout` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitcheckout: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.branch\nType: `String`\nDefault value: `''`\n\nThe name of the branch. E.g.: `testing`.\n\n#### options.create\nType: `Boolean`\nDefault value: `false`\n\nWhether the branch should be created (optional).\n\n#### options.create\nType: `Boolean`\nDefault value: `false`\n\nWhether the checkout should be forced in the case of git errors (optional)\n\n#### options.overwrite\nType: `Boolean`\nDefault value: `false`\n\nWhether the branch should be overwritten, or created if it doesn't already exist (optional).\n\n**NOTE:** When enabled, this option overwrites the target branch with the current branch.\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gitcheckout: {\n        task: {\n            options: {\n                branch: 'testing',\n                create: true\n            }\n        }\n    },\n});\n```\n\n## The \"gitstash\" task\n\nStash the changes in a dirty working directory away.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitstash` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitstash: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.command\nType: `String`\nDefault value: `'save'`\n\nThe stash command to run. E.g.: `save`, `apply`.\n\n#### options.stash\nType: `Integer`\nDefault value: `''`\n\nThe stash to apply. E.g.: `0` (optional).\n\n#### options.staged\nType: `Boolean`\nDefault value: `false`\n\nWhether the staged changes should be reapplied (optional).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gittag: {\n        stash: {\n            options: {\n                create: true\n            }\n        },\n        apply: {\n            options: {\n                command: 'apply',\n                staged: true,\n                stash: '0'\n            }\n        }\n    },\n});\n```\n\n## The \"gitclone\" task\n\nClones a git repo.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitclone` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitclone: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.bare\nType: `Boolean`\nDefault value: none\n\nRun git clone with the `--bare` option applied.\n\n#### options.branch\nType: `String`\nDefault value: none\n\nClone the repo with a specific branch checked out. (Cannot be used in conjunction with 'bare')\n\n#### options.depth\nType: `Integer`\nDefault value: none\n\nClone the repo with a limited revision history. (Such clones cannot be pushed from or pulled to.)\n\n#### options.repository (required)\nType: `String`\nDefault value: none\n\nThe path to the repository you want to clone.\n\n#### options.directory\nType: `String`\nDefault value: none\n\nClone the repo into a specific directory instead of the one git decides.\n\n#### options.recursive\nType: `boolean`\nDefault value: none\n\nPass the --recursive flag to the git clone command. This is equivalent to running git submodule update --init --recursive immediately after the clone is finished.\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gitclone: {\n        clone: {\n            options: {\n                repository: 'https://github.com/you/your-git-repo.git',\n                branch: 'my-branch',\n                directory: 'repo'\n            }\n        }\n    },\n});\n```\n\n## The \"gitreset\" task\n\nCreates a git branch using checkout -b, or checks out a given branch.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitreset` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitreset: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      },\n      files: {\n        src: // Target-specific files go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.mode\nType: `String`\nDefault value: `''`\n\nThe reset mode to run. E.g.: `hard`, `merge`.\n\n#### options.commit\nType: `String`\nDefault value: `'HEAD'`\n\nWhich commit to reset to (optional).\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gitreset: {\n        task: {\n            options: {\n                mode: 'hard',\n                commit: 'HEAD~1'\n            }\n        }\n    },\n});\n```\n## The \"gitrm\" task\n\nRemoves files from git's working tree and index.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitrm` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitrm: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      },\n      files: {\n        src: // Target-specific files go here.\n      }\n    }\n  },\n})\n```\n\nEach target defines a specific git task that can be run. The different available tasks are listed below.\n\n### Options\n\n#### options.force\nType: `boolean`\nDefault value: `false`\n\nWill force a removal of the files listed in the configuration.\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    gitrm: {\n        task: {\n            options: {\n                force: 'true'\n            },\n            files: {\n                src: ['dist/test.min.js']\n            }\n        }\n    },\n});\n```\n\n## The \"gitclean\" task\n\nRemove untracked files from the working tree.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitclean` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitclean: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      },\n      files: {\n        src: // Target-specific paths go here (optional).\n      }\n    }\n  },\n})\n```\n\n### Options\n\n#### options.force\nType: `Boolean`\nDefault value: `true`\n\nForce a run of the clean command (optional).\n\n#### options.dry\nType: `Boolean`\nDefault value: `false`\n\nDon't actually remove anything, just show what would be done (optional).\n\n#### options.quiet\nType: `Boolean`\nDefault value: `false`\n\nBe quiet, only report errors, but not the files that are successfully removed (optional).\n\n#### options.exclude\nType: `String`\nDefault value: `false`\n\nIn addition to those found in .gitignore (per directory) and $GIT_DIR/info/exclude, also consider the given patterns to be in the set of the ignore rules in effect (optional).\n\n#### options.onlyignorefiles\nType: `Boolean`\nDefault value: `false`\n\nRemove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files (optional).\n\n#### options.nonstandard\nType: `Boolean`\nDefault value: `false`\n\nDon't use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore rules given with this option. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with git reset) to create a pristine working directory to test a clean build (optional).\n\n#### options.directories\nType: `Boolean`\nDefault value: `false`\n\nRemove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default (optional).\n\n## The \"gitpush\" task\n\nPushes to a remote.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitpush` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitpush: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\n### Options\n\n#### options.remote\nType: `String`\nDefault value: `'origin'`\n\nThe remote where to push. E.g.: `origin`, `heroku`. The task will push to `origin` if left unset.\n\n#### options.branch\nType: `String`\nDefault value: `null`\n\nThe remote branch to push to. E.g.: `master`, `develop`. The task will push to the tracked branch if left unset.\n\n#### options.all\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--all` flag to the push.\n\n#### options.tags\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--tags` flag to the push.\n\n#### options.upstream\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--set-upstream` flag to the push.\n\n#### options.force\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--force` flag to the push.\n\n## The \"gitpull\" task\n\nPulls from a remote.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitpull` to the data object passed into `grunt.initConfig()`.\nYou can change the remote (origin is by default), and you can add a branch you want to pull from.\n\n```js\ngrunt.initConfig({\n  gitpull: {\n    your_target: {\n      options: {\n\n      }\n    }\n  },\n})\n```\n\n### Options\n\n#### options.remote\nType: `String`\nDefault value: `origin`\n\nThe remote to pull from. The task will not fail if the origin is left unset and pull the default remote git origin.\n\n#### options.branch\nType: `String`\nDefault value: `master`\n\nThe branch to pull from. E.g.: `master`, `develop` (optional).\n\n## The \"gitfetch\" task\n\nDownload objects and refs from a repo.\n\n### Overview\n\nIn your project's Gruntfile, add a section named `gitfetch` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitfetch: {\n    your_target: {\n      options: {\n        all: true\n      }\n    }\n  }\n})\n```\n\n### Options\n\n#### options.repository\nType: `String`\nDefault value: `null`\n\nThe repository you want to fetch from. When no remote is specified, by default the origin remote will be used.\n\n#### options.all\nType: `Boolean`\nDefault value: `false`\n\nAdds the `--all` flag. Fetch all remotes.\n\n#### options.append\nType: `Boolean`\nDefault value: `false`\n\nAdds the `--append` flag. Append ref names and object names of fetched refs.\n\n#### options.prune\nType: `Boolean`\nDefault value: `false`\n\nAdds the `--prune` flag. After fetching, remove any remote-tracking references that no longer exist on the remote.\n\n#### options.notags\nType: `Boolean`\nDefault value: `false`\n\nAdds the `--no-tags` flag. Disables automatic tag following.\n\n#### options.tags\nType: `Boolean`\nDefault value: `false`\n\nAdds the `--tags` flag. Fetch all tags from the remote into local.\n\n## The \"gitmerge\" task\n\nMerges another branch into the current branch.\n\n### Overview\nIn your project's Gruntfile, add a section named `gitmerge` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitmerge: {\n    your_target: {\n      options: {\n        // Target-specific options go here.\n      }\n    }\n  },\n})\n```\n\n### Options\n\n#### options.branch\nType: `String`\nDefault value: `null`\n\nThe branch to merge from. E.g.: `master`, `develop`. The task will fail if the branch if left unset.\n\n#### options.ffOnly\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--ff-only` flag to the merge.\n\n#### options.noff\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--no-ff` flag to the merge.\n\n#### options.squash\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--squash` flag to the merge.\n\n#### options.edit\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--edit` flag to the merge: this forces an editor to appear before committing the successful merge.\n\n#### options.noEdit\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--no-edit` flag to the merge: this bypasses the editor from appearing before committing a successful merge.\n\n#### options.message\nType: `String`\nDefault value: `null`\n\nWill add the `-m` flag followed by the value of this option to the merge: this string will be used as the commit message for the merge.\n\n#### options.commit\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--commit` flag to the merge: this option can be used to override ``-no-commit`` in the git config.\n\n#### options.noCommit\nType: `Boolean`\nDefault value: `false`\n\nWill add the `--no-commit` flag to the merge: do not commit the merge.\n\n\n## The \"gitarchive\" task\n\nArchives a branch.\n\n### Overview\n\nIn your project's Gruntfile, add a section named `gitarchive` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitarchive: {\n    master: {\n      options: {\n        format: 'tar.gz',\n        prefix: 'your-project-name/',\n        treeIsh: 'master',\n        output: '/tmp/your-project-name.tar.gz',\n        path: ['README', 'LICENSE']\n      }\n    }\n  }\n})\n```\n\n### Options\n\n#### options.treeIsh\nType: `String`\nDefault value: `'master'`.\n\nThe tree or commit to produce an archive for. E.g.: `'master'` or a commit hash.\n\n#### options.format\nType: `String`\nDefault value: `'tar'`.\n\nFormat of the resulting archive: `'tar'`, `'tar.gz'`, `'zip'`. If this option is not given, and the output file is specified, the format is inferred from the filename if possible (e.g. writing to \"foo.zip\" makes the output to be in the zip format). Otherwise the output format is tar.\n\n#### options.prefix\nType: `String`\nDefault value: none.\n\nAdds the `--prefix` flag. Don't forget the trailing `/`.\n\n#### options.output\nType: `String`\nDefault value: none.\n\nAdds the `--output` flag. Write the archive to a file instead of `stdout`.\n\n#### options.remote\nType: `String`\nDefault value: none.\n\nAdds the `--remote` flag. Instead of making a tar archive from the local repository, retrieve a tar archive from a remote repository.\n\n#### options.path\nType: `Array`\nDefault value: none.\n\nWithout an optional `path` parameter, all files and subdirectories of the current working directory are included in the archive. If one or more paths are specified, only these are included.\n\n\n## The \"gitlog\" task\n\nLogs commit history and stores the result in a grunt property or calls a callback function with the result. The result is an array of objects with the following properties:\n\n* `hash` - the commit hash\n* `author` - an object with `name` and `email` properties\n* `date` - the date of the commit\n* `subject` - the subject string of the commit\n* `body` - the body string of the commit\n\n### Overview\n\nIn your project's Gruntfile, add a section named `gitlog` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gitlog: {\n    mytarget: {\n      options: {\n        prop: 'gitlog.mytarget.result',\n        from: 'v0.2.0',\n        to: 'v0.2.2'\n      }\n    }\n  }\n})\n```\n\n### Options\n\n#### options.prop\nType: `String`\nDefault value: `'gitlog.<target name>.result'`.\n\nThe grunt property in which to store the results.\n\n#### options.callback\nType: `Function`\nDefault value: none.\n\nA callback function to call with the log results.\n\n#### options.pretty\nType: `String`\nDefault value: \n```\n    'format:' + \n    '{%n' +\n    '  \"hash\": \"%H\",%n' + // commit hash\n    '  \"author\": {%n' +\n    '    \"name\": \"%an\",%n' + // author\n    '    \"email\": \"%ae\"%n' + // email\n    '  },%n' +\n    '  \"date\": \"%aD\",%n' + // date\n    '  \"subject\": \"%s\",%n' + // subject\n    '  \"body\": \"%b\"%n' + // body\n    '}%n' +\n    '--grunt-gitlog-separator--' // separator\n```\n\nThe format for the log output\n\n#### options.number\nType: `Int`\nDefault value: none.\n\nThe number of logs entries to export\n\n#### options.from\nType: `String`\nDefault value: none.\n\nA commit hash, tag, etc to start from.\n\n#### options.to\nType: `String`\nDefault value: none.\n\nA commit hash, tag, etc to end at. Defaults to `'HEAD'` if `from` is specified.\n\n#### options.dateOrder\nType: `Boolean`\nDefault value: none.\n\nWhether to order by date. Defaults to true when `options.after` or `options.before` are specified.\n\n#### options.after\nType: `Date`\nDefault value: none.\n\nA date to start from. Causes `options.dateOrder` to be true\n\n#### options.before\nType: `Date`\nDefault value: none.\n\nA date to stop at. Causes `options.dateOrder` to be true\n\n#### options.noMerges\nType: `boolean`\nDefault value: true.\n\nWhether or not to include merges in the logs.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-git@0.3.3",
  "_from": "grunt-git@^0.3.3"
}
